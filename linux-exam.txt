

cd jaha save kiya h woh path

cat (file name) linux-exam.txt






# pwd – Print Working Directory
- $ pwd



# ls – List Files/Directories
- ls
- ls -l      # long listing
- ls -a      # show hidden files





# cd – Change Directory
- cd /home/user/Documents   # go to Documents folder
- cd ..                     # go back one directory
- cd ~                      # go to home directory






# wc Command (Word Count)
- wc file.txt            # shows lines, words, and characters
- wc -l file.txt         # count only lines
- wc -w file.txt         # count only words
- wc -m file.txt         # count only characters





# mkdir – Make Directory
- mkdir newfolder            # Create a single directory named 'newfolder'
- mkdir -p folder1/folder2   # create nested directories





# touch – Create Empty File / Update Timestamp
- touch file1.txt            # Create an empty file named file1.txt
- touch file2 file3          # Create multiple empty files (file2 and file3) at once




# mv – Move / Rename File
- mv file1.txt folder/          # move file
- mv oldname.txt newname.txt    # rename file





# rm – Remove File/Directory
- rm file1.txt           # remove file
- rm -r folder           # deletes folder and its content recursively
- rm -rf folder          # force remove folder





# cat – View File Content
- cat file.txt                 (Displays the content of file.txt)
- cat file1 file2 > merged.txt   (Combines contents of file1 and file2 into merged.txt)





# echo – Print Text / Write to File
- echo "Hello World"       (Prints "Hello World" to the terminal)
- echo "This is a line" > file.txt    (Writes "Data" to file.txt (overwrites existing content)
- echo "More" >> file.txt     (Appends "More" to file.txt)





# chmod – Change File Permissions
- chmod 755 script.sh     # rwxr-xr-x permission for script.sh
- chmod +x script.sh      # add execute permission



# clear – Clear Terminal
- clear







# whoami – Display Current Logged User
- whoami






# man – Manual Pages (Help)
- man ls
- man pwd





# date – Show Current Date/Time
- date
- date +"%d-%m-%Y %H:%M:%S"






# cal – Show Calendar
- cal          # current month
- cal 2025     # calendar of year 2025
- cal 07 2025  # July 2025






# uname – System Info
- uname         # kernel name
- uname -a      # detailed info




# df – Disk Space Usage
- df
- df -h    # human readable (MB/GB)








# cp file1.txt file2.txt (Copies file1.txt to file2.txt)
# cp -r folder1 folder2  (copies folder1 (and its contents) to folder2)







# Take Input and Greet
- echo "Enter your name:"
  read name
  echo "Hello, $name!"







# Check if a File Exists
- echo "Enter filename:"
  read file
  if [ -f "$file" ]; then
   echo "File exists."
  else
   echo "File does not exist."
  fi









# Sum of Two Numbers
- echo "Enter two numbers:"
  read a
  read b
  sum=$((a + b))
  echo "Sum is: $sum"








# Loop through Numbers (for loop)
- for i in {1..5}
  do
    echo "Number: $i"
  done







# Check Odd or Even
- read -p "Enter a number: " num
  if (( num % 2 == 0 )); then
    echo "$num is Even"
  else
    echo "$num is Odd"
  fi








# Create Directory and Files
- mkdir -p myfolder
  touch myfolder/file1.txt myfolder/file2.txt
  echo "Files created inside myfolder"








# Factorial of a Number
- read -p "Enter a number: " n
  fact=1
  for (( i=1; i<=n; i++ ))
  do
    fact=$((fact * i))
  done
  echo "Factorial of $n is $fact"








# Display Current Date, Time, and User
- echo "Current date and time: $(date)"
  echo "Logged in user: $(whoami)"







# Count Number of Files in Directory
- read -p "Enter directory name: " dir
  if [ -d "$dir" ]; then
    count=$(ls "$dir" | wc -l)
    echo "Total files in $dir: $count"
  else
    echo "Directory does not exist."
  fi







# Menu-Driven Script
- echo "1. Date"
  echo "2. List Files"
  echo "3. Who is logged in"
  read -p "Enter your choice [1-3]: " choice

  case $choice in
    1) date ;;
    2) ls -l ;;
    3) who ;;
    *) echo "Invalid choice" ;;
  esac








# While Loop Example
- i=1
  while [ $i -le 5 ]
  do
    echo "Number: $i"
    ((i++))
  done







# Display Contents of a File
- echo -n "Enter the filename to read: "
  read filename

  if [ -f "$filename" ]; then
    echo "Contents of $filename:"
    cat "$filename"
  else
    echo "File '$filename' does not exist."
  fi








# Reverse Digits of a Number
- echo -n "Enter a number: "
  read num
  rev=0

  while [ $num -gt 0 ]
  do
    rem=$((num % 10))
    rev=$((rev * 10 + rem))
    num=$((num / 10))
  done

  echo "Reversed number: $rev"







# Student Grading System
- echo -n "Enter student's marks (0-100): "
  read marks

  if [ $marks -ge 90 ]; then
     echo "Grade: A"
  elif [ $marks -ge 80 ]; then
     echo "Grade: B"
  elif [ $marks -ge 70 ]; then
     echo "Grade: C"
  elif [ $marks -ge 60 ]; then
     echo "Grade: D"
  else
     echo "Grade: F (Fail)"
  fi









# Sum of Digits of a Number
- echo -n "Enter a number: "
  read num
  sum=0

  while [ $num -gt 0 ]
  do
    rem=$((num % 10))
    sum=$((sum + rem))
    num=$((num / 10))
  done

  echo "Sum of digits: $sum"









# Calculator Program
- echo -n "Enter first number: "
  read a
  echo -n "Enter second number: "
  read b
  echo -n "Enter operator (+, -, *, /): "
  read op

  case $op in
    +) result=$((a + b));;
    -) result=$((a - b));;
    \*) result=$((a * b));;
    /) 
        if [ $b -ne 0 ]; then
            result=$((a / b))
        else
            echo "Error: Division by zero"
            exit 1
        fi
        ;;
    *) echo "Invalid operator"; exit 1;;
  esac

  echo "Result: $result"








# Fibonacci Series
- echo -n "Enter number of terms: "
  read n
  a=0
  b=1

  echo "Fibonacci Series:"
  for (( i=0; i<n; i++ ))
  do
    echo -n "$a "
    fn=$((a + b))
    a=$b
    b=$fn
  done






# Palindrome Number Check
- echo -n "Enter a number: "
  read num
  temp=$num
  rev=0

  while [ $num -gt 0 ]
  do
    rem=$((num % 10))
    rev=$((rev * 10 + rem))
    num=$((num / 10))
  done

  if [ $rev -eq $temp ]; then
    echo "Palindrome"
  else
    echo "Not Palindrome"
  fi







# Largest of Three Numbers
- echo "Enter three numbers:"
  read a
  read b
  read c

  if [ $a -ge $b ] && [ $a -ge $c ]; then
    echo "$a is largest"
  elif [ $b -ge $a ] && [ $b -ge $c ]; then
    echo "$b is largest"
  else
    echo "$c is largest"
  fi






# Table of a Number
- echo -n "Enter a number: "
  read num

  for (( i=1; i<=10; i++ ))
  do
    echo "$num x $i = $((num * i))"
  done






# Print Even Numbers up to N
- echo -n "Enter limit: "
  read n

  for (( i=1; i<=n; i++ ))
  do
    if (( i % 2 == 0 )); then
      echo $i
    fi
  done







# Swap Two Numbers Without Third Variable
- echo "Enter two numbers:"
  read a
  read b

  echo "Before swapping: a=$a, b=$b"
  a=$((a + b))
  b=$((a - b))
  a=$((a - b))

  echo "After swapping: a=$a, b=$b"






# Check Prime Number
- echo -n "Enter a number: "
  read num
  count=0

  for (( i=2; i<num; i++ ))
  do
    if (( num % i == 0 )); then
      count=1
      break
    fi
  done

  if [ $count -eq 0 ]; then
    echo "$num is Prime"
  else
    echo "$num is Not Prime"
  fi








# Simple File Append/Read
- echo "Enter text to append in file:"
  read text
  echo "$text" >> myfile.txt
  echo "File content after append:"
  cat myfile.txt








# Count Lines, Words, and Characters in a File
- echo "Enter file name:"
  read file

  if [ -f "$file" ]; then
    echo "Lines: $(wc -l < $file)"
    echo "Words: $(wc -w < $file)"
    echo "Characters: $(wc -m < $file)"
  else
    echo "File does not exist"
  fi


#Calculator 

echo "Enter the First Number"
read a

echo "Enter the Second Number"
read b

echo "Enter the Choise"

echo "1.Addition"
echo "2.Subtraction"
echo "3.Multiplication"
echo "4.Division"


read choise

case $choise in
1)res=$((a+b))
	echo "Result: $a + $b = $res";;
2)res=$((a-b))
	echo "Result: $a - $b = $res";;
3)res=$((a*b))
	echo "Result: $a * $b = $res";;
4)res=$((a/b))
	echo "Result: $a / $b = $res";;
*)
	echo"Invalid Choise";;
esac


# String Matching

echo "Enter your first String"
read s1

echo "Enter your second String"
read s2


if [ "$s1" = "$s2" ]; then
	echo "String are equal"
else
	echo "String are not equal"
fi



























































